#!/bin/bash

while [[ $# -gt 0 ]]
do
	opt="$1"
	case $opt in 
		-f|--file)
			file="$2"
			shift
		;;
		-t|--table)
			table=1
			shift
		;;
		-S|--set)
			set=1
			shift
		;;
		-m|--modify)
			modify=1
			argumentsToModify=("$2" "$3" "$4")
			for argument in ${argumentsToModify[@]}
			do
				if [[ $argument =~ ^s\= ]]
				then
					sectionToModify=$(echo $argument | awk -F "=" '{ print $2 }')
					echo $sectionToModify
				elif [[ $argument =~ ^k\= ]]
				then
					keyToModify=$(echo $argument | awk -F "=" '{ print $2 }')
					echo $keyToModify
				elif [[ $argument =~ ^v\= ]]
				then
					valueToModify=$(echo $argument | awk -F "=" '{ print $2 }')
					echo $valueToModify
				fi
			done
			shift
		;;
		-v|--verbose)
			verbose=1
			shift
		;;
		-h|--help)
			echo -e "
panINI v1.0	Written by Bryce McNab

panINI (parse all INI) is an ini parser written in bash.

	panINI: pan is a common root word meaning "all", and frankly it makes the name a great food.

	-f|--file	Specify the ini file to parse.
	-t|--table	Display the ini contents in a table
	-S|--set	Sets all the settings in the configurations files as variables.
	-m|--modify	Modify value of key in ini file.
	-v|--verbose	Show verbose output.
	-h|--help	Displays this page.

	Sections: ini files can contain \[sections\]. These are parsed as arrays with key=value set as an element in bash 3, and as associative arrays in bash 4.
"
		;;
	esac
	shift
done

bashVersion=$(echo ${BASH_VERSION%%[^0-9.]*} | grep -o ^[0-9]*)
if [[ $bashVersion == 3 ]]
then
	echo -e "\n!!! Warning: running in bash \"$BASH_VERSION\". The -S feature will not set sectioned variables into associative arrays. !!!\n" 
fi

while read line
do
	key=$(echo $line | awk -F "=" '{ print $1 }')
	commentOrNot=$(echo $key | grep -o "^\;")
	value=$(echo $line | awk -F "=" '{ print $2 }')

	if [[ $key =~ ^\[.*$ ]]
	then
	section=$(echo $key | sed "s/\[//g" | sed "s/\]//g")
	eval unset "${section}"
		
		# Declare section array
		if [[ ( $bashVersion == 3 ) && ( $set == 1 ) ]]
		then
			declare -a "${section}"
		elif [[ ( $bashVersion == 4 ) && ( $set == 1 ) ]]
		then
			declare -A "${section}"
		fi
			
		# Display if -t is set
		if [[ $table == 1 ]]
		then 
			echo -e "\n${section}\n====="
		fi
		
		# Display if -v is set
		if [[ $verbose == 1 ]]
		then
			echo -e "New section: $section"
		fi
	elif [[ ( "$key" != "" ) && ( "$commentOrNot" != ";" ) ]]
	then
		if [[ "$section" == "" ]]
		then
			# Set the variable names after the key as the value.
			if [[ $set == 1 ]]
			then
				declare "${key}"="${value}"
				verify=$(eval echo \$${key})
				if [[ "$verify" == "$value" ]]
				then
					verification=good
				fi
			fi

			# Display if -t is set
			if [[ $table == 1 ]]
			then
				echo -e "${key}\t${value}"
			fi
	
			# Display if -v is set
			if [[ $verbose == 1 ]]
			then
				if [[ "$verification" == "good" ]]
				then
					echo -e "Variable \"${key}\" set to \"${value}\""
				fi
			fi
		else
			if [[ $bashVersion == 3 ]]
			then
				# Set key and value as elements in array
				if [[ $set == 1 ]]
				then
					element=$(eval echo \${#$section[@]})
					eval $section[$element]="${key}=\"${value}\""
				fi

				# Display if -t is set
				if [[ $table == 1 ]]
				then
					echo -e "${key}\t${value}"
				fi
	
				# Display is -v is set
				if [[ ( $verbose == 1 ) && ( $key != "" )]]
				then
					echo -e "\tVariable \"${key}\" set to \"${value}\""
				fi
			elif [[ $bashVersion == 4 ]]
			then
				# Set value in associative array with key
				if [[ $set == 1 ]]
				then
					read "$section[$key]" <<< "$value"
				fi

				# Display if -t is set
				if [[ $table == 1 ]]
				then
					echo -e "${key}\t${value}"
				fi
			fi
			
			if [[ ( $modify == 1 ) && ( "$key" == "$keyToModify" ) && ( "$section" == "$sectionToModify" ) ]]
			then
				# echo $line | sed "s/$line/$key=$valueToModify/" $file
				
			fi
		fi
	fi
done < $file

## View comments
if [[ $comments == 1 ]]
then
	while read line
	do
		echo $line | grep "^;"
	done < $file
fi

# Clean variables
unset file table set comments section key value modify verbose
